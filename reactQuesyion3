import React, { useState } from 'react';
import './styles.css';

class User {
    constructor(name, username, email) {
        this.name = name;
        this.username = username;
        this.email = email;
    }
}

const App = () => {
    const [formData, setFormData] = useState(new User('', '', ''));
    const [responseMessage, setResponseMessage] = useState('');
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(false); // Add loading state
    const [error, setError] = useState(null); // Add error state

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData({
            ...formData,
            [name]: value,
        });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true); // Set loading to true
        setError(null); // Clear previous errors

        try {
            // Placeholder URL. Replace with your actual API endpoint.
            const response = await fetch('https://jsonplaceholder.typicode.com/posts', { // Using posts as a mock endpoint
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData),
            });

            if (!response.ok) {
                const errorData = await response.json(); // Try to get error details from the server
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorData?.message || response.statusText}`);
            }

            const data = await response.json();
            setResponseMessage(`User created: ${data.name || "Successfully registered"}`); // Provide a more robust success message
            setFormData(new User('', '', '')); // Clear the form after successful submission
        } catch (error) {
            console.error("Error creating user:", error);
            setError(error.message); // Set the error message to display
            setResponseMessage(`Error creating user: ${error.message}`);
        } finally {
            setLoading(false); // Set loading to false regardless of success/failure
        }
    };

    const fetchUsers = async () => {
      setLoading(true);
      setError(null);
        try {
            const response = await fetch('https://jsonplaceholder.typicode.com/users');
             if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            setUsers(data);
        } catch (error) {
            console.error("Error fetching users:", error);
            setError(error.message);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="container">
            <h1>User Registration</h1>
            <form onSubmit={handleSubmit} className="form">
                <input type="text" name="name" placeholder="Name" value={formData.name} onChange={handleChange} required />
                <input type="text" name="username" placeholder="Username" value={formData.username} onChange={handleChange} required />
                <input type="email" name="email" placeholder="Email" value={formData.email} onChange={handleChange} required />
                <button type="submit" disabled={loading}>
                    {loading ? "Registering..." : "Register"}
                </button>
            </form>
            {error && <p style={{ color: 'red' }}>{error}</p>} {/* Display error message */}
            <p>{responseMessage}</p>

            <button onClick={fetchUsers} className="fetch-button" disabled={loading}>
                {loading ? "Fetching..." : "Fetch Employees"}
            </button>

            <div className="user-list">
              {error && <p style={{ color: 'red' }}>{error}</p>}
                {users.length > 0 && (
                    <ul>
                        {users.map((user) => (
                            <li key={user.id}>
                                {user.name} ({user.username})
                            </li>
                        ))}
                    </ul>
                )}
            </div>
        </div>
    );
};

export default App;
